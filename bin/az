#!/bin/bash

# Import utils.h
. $(dirname ${BASH_SOURCE[0]})/utils.sh

function GetLocation()
{
    echo "eastus"
}

function GetRegistry()
{
    local _resources="$1"
    REGISTRY=$_resources
    REG_SERVER=${_resources}.azurecr.io
    echo "${REG_SERVER}"
}

# Given a source directory, copies its contents to a GCP bucket
#
# ARGUMENTS:
#   _SOURCE_DIR  - The local machine source to copy
#   _BUCKET_NAME - The GCP Data Bucket to upload data
#   _AUTH_CONFIG - The pre-authenticated config container
#
function CopyData()
{
    _SOURCE_DIR=$1
    _BUCKET_NAME=$2
    _AUTH_CONFIG=$3

    while IFS= read -r file_entry; do
        docker run \
            --rm \
            --mount type=bind,source="${_SOURCE_DIR}",target=/mnt/data \
            --volumes-from ${_AUTH_CONFIG} \
            microsoft/azure-cli \
            az storage blob upload \
                --container-name $_BUCKET_NAME \
                --file $_SOURCE_DIR/$file_entry
                --name $file_entry
   done < <(EnumerateFolderContents "$_SOURCE_DIR" "$_SOURCE_DIR/blacklist.txt")
}

# Cleanup function to remove trailing characters in Azure CLI's
# --query output
TrimQuery() {
    INPUT=$1
    echo ${INPUT: 1: -2}
}

function GetPlatformContainer()
{
    # Use the prebuilt Azure Cli container Provided by Microsoft
    docker pull microsoft/azure-cli
}

# The Azure CLI container does not provide an automatic mount point
# for it's credentials. Thes requires a little extra manual work through
# docker but the persisted login credentials are still accesible across
# container instances.
#
# https://github.com/Azure/azure-cli-docker/issues/54
#
function Login()
{
    local _container_name=$1
    local _config_mount=$2

    docker run \
        -it \
        --name ${_container_name} \
        -e AZURE_CONFIG_DIR=${_config_mount} \
        --mount type=volume,target=${_config_mount} \
        microsoft/azure-cli \
        az login
}

# Reusable AZ command to mask the use of docker.
AZ="docker run --rm -it -e AZURE_CONFIG_DIR=${CONFIG_MOUNT} --volumes-from ${CONTAINER_NAME} microsoft/azure-cli az"

function Provision()
{
    local _resources=$1
    local _location=$2

    # Create a resource group to host transient resoureces.
    $AZ group create --name $_resources --location $_location
    $AZ acr create --resource-group $_resources --name $REGISTRY --sku Basic

    # Can't use `az acr login` from docker container. This command requires
    # an installation of docker to exist as it calls `docker ps` internally
    # and then issues a `docker login` command. Instead setting admin enabled
    # to login with the ACR admin credential.
    #
    $AZ acr update --name $REGISTRY --admin-enabled true
}

function PrepareDocker()
{
    # Get the admin username and password from the Azure Container Registry
    # by querying for the data using `az acr credential show`
    #
    ACR_USERNAME=$(TrimQuery "$($AZ acr credential show --name $REGISTRY --query username)")
    ACR_PASSWORD=$(TrimQuery "$($AZ acr credential show --name $REGISTRY --query passwords[0].value)")

    # Login to the privte Azure Container Registry with Docker.
    echo $ACR_PASSWORD | docker login -u $ACR_USERNAME --password-stdin https://${REG_SERVER}
}

function Deploy()
{
    # Create and deploy a container instance in Azure.
    DNS_NAME_LABEL=${APPLICATION}-${RANDOM}${RANDOM}
    $AZ container create \
        --name ${APPLICATION} \
        --resource-group $RESOURCES \
        --image ${REMOTE_IMAGE} \
        --registry-login-server ${REG_SERVER} \
        --registry-username $ACR_USERNAME \
        --registry-password $ACR_PASSWORD \
        --ip-address public \
        --ports 8888\
        --dns-name ${DNS_NAME_LABEL}

    JUPYTER_SERVER=$(TrimQuery \
        "$($AZ container show --resource-group $RESOURCES --name $APPLICATION --query ipAddress.fqdn)")
}

function ConnectToServer()
{
    $AZ container attach --resource-group $RESOURCES --name $APPLICATION
}
