#!/bin/bash

# Check if file is already sourced
[ -n "$__BUILD__" ] && return || readonly __BUILD__=1

# Import utils.h
. $(dirname ${BASH_SOURCE[0]})/utils.sh

# Validates the Data Directory
# ARGUMENTS:
#   $1 [DATASOURCE] - Data source.
#   $2 [WORKSPACE]  - The main application workspace
#
function CheckDataSource()
{
    if ! [ $# = 2 ]; then
        echo "USE: ${FUNCNAME[0]} <DATASOURCE> <WORKSPACE>" 1>&2
    fi

    if [ -d "$1" ]; then
        return 0
    else
        return 1
    fi
}

# Validates the Workspace directory/repository
# ARGUMENTS:
#   $1 [WORKSPACE] - The main application workspace or repository.
#
function CheckWorkspace()
{
    if ! [ $# = 1 ]; then
        echo "USE: ${FUNCNAME[0]} <WORKSPACE>" 1>&2
    fi

    if [ -d "$1" ]; then
        if [[ "$1" = /* ]]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

function GetBuilder()
{
    local repo2docker_remote=https://github.com/jupyter/repo2docker.git

    # As of 2-21-2019, repo2docker is not published on hub.docker.com
    # with a latest tag. The tagging strategy is to use the commit hash
    # for the repository's HEAD as the image tag.
    #
    tag=$(git ls-remote $repo2docker_remote HEAD | awk '{ print $1 }')
    tag=${tag: 0: 8}

    set -e
    docker pull jupyter/repo2docker:${tag}
    set +e
}

function Build()
{
    if ! [ $# = 3 ]; then
        echo "USE: ${FUNCNAME[0]} <WORKSPACE> <APPLICATION_NAME> <CUDA_ENABLED>" 1>&2
    fi

    local _workspace="$1"
    local _application="$2"
    local _use_gpu="$3"

    # The Docker Socket needs to be mounted to the
    # repo2docker image when issuing a docker run
    # command as docker is a dependency of repo2docker
    #
    local C_DOCKER_SOCKET=/var/run/docker.sock

    # Alias the jupyter-repo2docker command
    R2D="docker run \
        --rm \
        --mount type=bind,source=${_workspace},target=/build
        --volume "${C_DOCKER_SOCKET}":${C_DOCKER_SOCKET} \
        jupyter/repo2docker:${tag} \
        jupyter-repo2docker"

    set -e
    # Use repo2docker to build the workspace folder.
    $R2D \
        --no-run \
        --debug \
        --image-name ${_application} \
        --user-name $(id -urn) \
        --user-id $(id -ur) \
        --target-repo-dir /workspace \
        /build
    set +e
}
